---
# This pipeline requires 5 variables to be set in the CI/CD Settings
# hint for creating the base64 encoded content: `cat .ssh/id_rsa|base64|pbcopy`

# SSH_KEY - base64 encoded ssh key (think ~/.ssh/id_rsa)
# SSH_PUBLIC_KEY - base64 encoded ssh public key (think ~/.ssh/id_rsa.pub)
# AWS_CREDENTIALS - base64 encoded credentials file (think ~/.aws/credentials)
# AWS_CONFIG - base64 encoded config file (think ~/.aws/config)
# GKE_CONFIG - base64 encoded json file (think ~/.config/gcloud/someconfig.json)
image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_DRIVER: overlay2
# images
  ANSIBLE_LINT: "quay.io/samsung_cnct/ansible-lint:latest"
  KRAKEN_TOOLS: "quay.io/samsung_cnct/kraken-tools:latest"
  E2E_TESTER: "quay.io/samsung_cnct/e2etester:0.2"

stages:
  - prep
  - config_generation
  - test
  - test-e2e
  - cleanup
  - build
  - publish

prep:ansible_lint:
  stage: prep
  image: $ANSIBLE_LINT
  script:
    # - ansible-lint ansible/*.yaml
    - ls ansible/*.yaml ansible/**/*.yaml | xargs -I {} ansible-lint {}

prep:create_aws_config:
  stage: config_generation
  # only:
  #   - tags
  #   - branches
  image: $KRAKEN_TOOLS
  artifacts: 
    paths:
      - $CI_PROJECT_DIR/cluster/aws/config.yaml 
    expire_in: 1 hour
  script:
    - pwd
    - ./bin/up.sh --generate --config $CI_PROJECT_DIR/cluster/aws/config.yaml
    - build-scripts/update-generated-config.sh $CI_PROJECT_DIR/cluster/aws/config.yaml ci-$CI_PIPELINE_ID

prep:create_gke_config:
  stage: config_generation
  # only:
  #   - tags
  #   - branches
  image: $KRAKEN_TOOLS
  artifacts: 
    paths:
      - $CI_PROJECT_DIR/cluster/gke/config.yaml 
    expire_in: 1 hour
  script:
    - ./bin/up.sh --generate --provider GKE --config $CI_PROJECT_DIR/cluster/gke/config.yaml
    - build-scripts/update-generated-config.sh $CI_PROJECT_DIR/cluster/gke/config.yaml ci-$CI_PIPELINE_ID

# this is working
# test:aws_dry_run:
#   stage: test
#   variables:
#     JOB_BASE_NAME: ${CI_PROJECT_NAME}
#     BUILD_ID: $CI_PIPELINE_ID
#   image: $KRAKEN_TOOLS
#   script:
#     - mkdir -p /root/.ssh /root/.aws/
#     - echo $SSH_KEY | base64 -d > /root/.ssh/id_rsa
#     - chmod og-wrx /root/.ssh/id_rsa
#     - echo $SSH_PUBLIC_KEY | base64 -d > /root/.ssh/id_rsa.pub
#     - echo $AWS_CREDENTIALS | base64 -d > /root/.aws/credentials
#     - echo $AWS_CONFIG | base64 -d > /root/.aws/config
#     - PWD=`pwd` ./bin/up.sh --config $CI_PROJECT_DIR/cluster/aws/config.yaml --output $PWD/cluster/aws/ -t dryrun

test:cloud_aws:
  stage: test
  image: $KRAKEN_TOOLS
  script: 
    - mkdir -p /root/.ssh /root/.aws/
    # - ./bin/up.sh --generate --config /root/cluster/aws/config.yaml
    # - build-scripts/update-generated-config.sh /root/cluster/aws/config.yaml ci-test
    - echo $SSH_KEY | base64 -d > /root/.ssh/id_rsa
    - chmod og-wrx /root/.ssh/id_rsa
    - echo $SSH_PUBLIC_KEY | base64 -d > /root/.ssh/id_rsa.pub
    - echo $AWS_CREDENTIALS | base64 -d > /root/.aws/credentials
    - echo $AWS_CONFIG | base64 -d > /root/.aws/config
    - ./bin/up.sh --config $CI_PROJECT_DIR/cluster/aws/config.yaml --output $CI_PROJECT_DIR/cluster/aws/

test:cloud_gke:
  stage: test
  image: $KRAKEN_TOOLS
  script:
    - mkdir -p /root/.ssh /root/.config/gcloud/
    # - ./bin/up.sh --generate --provider GKE --config /root/cluster/gke/config.yaml
    # - build-scripts/update-generated-config.sh /root/cluster/gke/config.yaml ci-test
    - echo $SSH_KEY | base64 -d > /root/.ssh/id_rsa
    - chmod og-wrx /root/.ssh/id_rsa
    - echo $SSH_PUBLIC_KEY | base64 -d > /root/.ssh/id_rsa.pub
    - echo $GKE_CONFIG | base64 -d > /root/.config/gcloud/patrickRobot.json
    - ./bin/up.sh --config $CI_PROJECT_DIR/cluster/gke/config.yaml --output /root/cluster/gke/


# test:e2e:
#   stage: test-e2e
#   image: $E2E_TESTER
#   script: 
#     - mkdir -p /root/.ssh /root/.aws/
#     # - ./bin/up.sh --generate --config /root/cluster/aws/config.yaml
#     # - build-scripts/update-generated-config.sh /root/cluster/aws/config.yaml $CI_PIPELINE_ID-$CI_JOB_ID
#     - echo $SSH_KEY | base64 -d > /root/.ssh/id_rsa
#     - chmod og-wrx /root/.ssh/id_rsa
#     - echo $SSH_PUBLIC_KEY | base64 -d > /root/.ssh/id_rsa.pub
#     - echo $AWS_CREDENTIALS | base64 -d > /root/.aws/credentials
#     - echo $AWS_CONFIG | base64 -d > /root/.aws/config
#     - PWD=`pwd` build-scripts/conformance-tests.sh "v1.8.4" ci-test /var/opt/gitlab

cleanup:cloud_aws:
  stage: cleanup
  image: $KRAKEN_TOOLS
  when: always
  script: 
    - mkdir -p /root/.ssh /root/.aws/
    # - ./bin/up.sh --generate --config /root/cluster/aws/config.yaml
    # - build-scripts/update-generated-config.sh /root/cluster/aws/config.yaml ci-test
    - echo $SSH_KEY | base64 -d > /root/.ssh/id_rsa
    - chmod og-wrx /root/.ssh/id_rsa
    - echo $SSH_PUBLIC_KEY | base64 -d > /root/.ssh/id_rsa.pub
    - echo $AWS_CREDENTIALS | base64 -d > /root/.aws/credentials
    - echo $AWS_CONFIG | base64 -d > /root/.aws/config
    - ./bin/down.sh --config $CI_PROJECT_DIR/cluster/aws/config.yaml --output $CI_PROJECT_DIR/cluster/aws/

cleanup:cloud_gke:
  stage: cleanup
  image: $KRAKEN_TOOLS
  when: always
  script:
    - mkdir -p /root/.ssh /root/.config/gcloud/
    # - ./bin/up.sh --generate --provider GKE --config /root/cluster/gke/config.yaml
    # - build-scripts/update-generated-config.sh /root/cluster/gke/config.yaml ci-test
    - echo $SSH_KEY | base64 -d > /root/.ssh/id_rsa
    - chmod og-wrx /root/.ssh/id_rsa
    - echo $SSH_PUBLIC_KEY | base64 -d > /root/.ssh/id_rsa.pub
    - echo $GKE_CONFIG | base64 -d > /root/.config/gcloud/patrickRobot.json
    - ./bin/down.sh --config $CI_PROJECT_DIR/cluster/gke/config.yaml --output /root/cluster/gke/

